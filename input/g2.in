N = $ main compound_stmt stmt simple_stmt decl_stmt type primitive_type array_type identifier_list assign_stmt expression term factor io_stmt struct_stmt if_stmt while_stmt condition relation constant #
E = $ ; , [ ] ( ) { } = < <= == != >= > bool char integer string identifier constant + - * / print read if else while #
S = main
P = {
    main -> { compound_stmt }
    compound_stmt -> stmt | stmt compound_stmt
    stmt -> simple_stmt | struct_stmt
    simple_stmt -> decl_stmt | assign_stmt | io_stmt
    decl_stmt -> type identifier_list ;
    type -> primitive_type | array_type
    primitive_type -> bool | char | integer | string
    array_type -> primitive_type [ ]
    identifier_list -> identifier | identifier , identifier_list
    assign_stmt -> identifier = expression
    expression -> expression + term | expression - term | term
    term -> term * factor | term / factor | factor
    factor -> ( expression ) | identifier | constant
    io_stmt -> print ( expression ) | read ( identifier )
    struct_stmt -> compound_stmt | if_stmt | while_stmt
    if_stmt -> if ( condition ) { compound_stmt } | if ( condition ) { compound_stmt } else { compound_stmt }
    while_stmt -> while ( condition ) { compound_stmt }
    condition -> expression relation expression
    relation -> < | <= | == | != | >= | >
    constant -> integer | char | string | bool
}